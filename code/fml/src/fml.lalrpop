use std::str::FromStr;
use crate::fml_ast::AST;

grammar;

pub Expression: AST<'input> = {
   "(" <Expression> ")"                  => <>, // expression in parentheses

   Assignment                            => <>, // Feenified variable definition
   Identifier                            => <>, // variable access
   Mutation                              => <>, // variable mutation

   FunctionDefinition                    => <>, // Feeny-style function definition, returns unit?
   FunctionApplication                   => <>, // function application

   Literal                               => <>,
}

FunctionDefinition: AST<'input> = {
    "function" <id: Identifier> <parameters: Parameters> "<-" <body: Expression> => {
        let boxed_parameters: Vec<Box<AST<'input>>> =
            parameters.into_iter().map(|e| Box::new(e)).collect();
        AST::FunctionDefinition{identifier: Box::new(id),
                                parameters: boxed_parameters,
                                body: Box::new(body)}
    }
}

Parameters: Vec<AST<'input>> = {
    "(" <elements: (<Identifier> ",")*> <element: Identifier?> ")" => match element {
        None => elements,
        Some(e) => { let mut elements = elements; elements.push(e); elements }
    }
}

FunctionApplication: AST<'input> = {
    <function: Identifier> <arguments: Arguments> => {
        let boxed_arguments: Vec<Box<AST<'input>>> =
            arguments.into_iter().map(|e| Box::new(e)).collect();
        AST::FunctionApplication{identifier: Box::new(function), arguments: boxed_arguments}
    }
}

Arguments: Vec<AST<'input>> = {
    "(" <elements: (<Expression> ",")*> <element: Expression?> ")" => match element {
        None => elements,
        Some(e) => { let mut elements = elements; elements.push(e); elements }
    }
}

Assignment: AST<'input> = {
    "let" <id: Identifier> "=" <v: Expression> => AST::Assignment{identifier: Box::new(id), value: Box::new(v)},
}

Mutation: AST<'input> = {
    <id: Identifier> "<-" <v: Expression> => AST::Mutation{identifier: Box::new(id), value: Box::new(v)},
}

Literal: AST<'input> = {
    Number                               => <>,
    String                               => <>,
    Boolean                              => <>,
}

Identifier: AST<'input> = {
     r"[_A-Za-z][_A-Za-z0-9]*"           => AST::Identifier(<>),
     "this"                              => AST::Identifier(<>),
}

Number: AST<'input> = {
    r"[-]?[0-9]+"                        => AST::Number(i32::from_str(<>).unwrap()),
}

String: AST<'input> = {
    <s:r#""([^\\]|\\[ntbr\\])*""#>       => AST::StringLiteral(&s[1..s.len()-1]),
}

Boolean: AST<'input> = {
    "true"                               => AST::BooleanLiteral(true),
    "false"                              => AST::BooleanLiteral(false),
}