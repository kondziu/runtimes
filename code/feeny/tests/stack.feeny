defn stack (max_size) :
    object :
        var contents = array(max_size, 0)
        var pointer = -1
        var max = max_size

        method full? () :
            this.pointer >= this.max - 1

        method empty? () :
            this.pointer < 0

        method push (value) :
            if this.pointer >= this.max - 1:
                printf("Error: attempt to push to full stack\n")
                null
            else :
                this.pointer = this.pointer + 1
                this.contents[this.pointer] = value
                1

        method length () :
            this.pointer + 1
        
        method pop () :
            if this.pointer < 0 :
                printf("Error: attempt to pop form empty stack\n")
                null
            else :
                var result = this.contents[this.pointer]
                this.pointer = this.pointer - 1
                result

        method print () :            
            printf("[")
            var i = 0
            while i < this.max :
                if i > 0 :
                    printf(", ")
                if i == this.pointer :
                    printf("|")
                printf("~", this.contents[i])
                if i == this.pointer :
                    printf("|")
                i = i + 1
            printf("]\n")
            
defn test_stack () :
    var s = stack(10)
    var i = 11
    while i > 0 :
        var value = 10 - i + 1
        s.push(value)
        printf("push ~ len=~ ", value, s.length())
        s.print()
        if s.full?() :
            printf("stack is full\n")
        if s.empty?() :
            printf("stack is empty\n")
        i = i - 1
    i = 11
    while i > 0 :
        printf("pop ~ len=~ ", s.pop(), s.length())
        s.print()
        if s.full?() :
            printf("stack is full\n")
        if s.empty?() :
            printf("stack is empty\n")
        i = i - 1


test_stack()

;============================================================
;====================== Output ==============================
;============================================================
;push 0 len=1 [|0|, 0, 0, 0, 0, 0, 0, 0, 0, 0]
;push 1 len=2 [0, |1|, 0, 0, 0, 0, 0, 0, 0, 0]
;push 2 len=3 [0, 1, |2|, 0, 0, 0, 0, 0, 0, 0]
;push 3 len=4 [0, 1, 2, |3|, 0, 0, 0, 0, 0, 0]
;push 4 len=5 [0, 1, 2, 3, |4|, 0, 0, 0, 0, 0]
;push 5 len=6 [0, 1, 2, 3, 4, |5|, 0, 0, 0, 0]
;push 6 len=7 [0, 1, 2, 3, 4, 5, |6|, 0, 0, 0]
;push 7 len=8 [0, 1, 2, 3, 4, 5, 6, |7|, 0, 0]
;push 8 len=9 [0, 1, 2, 3, 4, 5, 6, 7, |8|, 0]
;push 9 len=10 [0, 1, 2, 3, 4, 5, 6, 7, 8, |9|]
;stack is full
;Error: attempt to push to full stack
;push 10 len=10 [0, 1, 2, 3, 4, 5, 6, 7, 8, |9|]
;stack is full
;pop 9 len=9 [0, 1, 2, 3, 4, 5, 6, 7, |8|, 9]
;pop 8 len=8 [0, 1, 2, 3, 4, 5, 6, |7|, 8, 9]
;pop 7 len=7 [0, 1, 2, 3, 4, 5, |6|, 7, 8, 9]
;pop 6 len=6 [0, 1, 2, 3, 4, |5|, 6, 7, 8, 9]
;pop 5 len=5 [0, 1, 2, 3, |4|, 5, 6, 7, 8, 9]
;pop 4 len=4 [0, 1, 2, |3|, 4, 5, 6, 7, 8, 9]
;pop 3 len=3 [0, 1, |2|, 3, 4, 5, 6, 7, 8, 9]
;pop 2 len=2 [0, |1|, 2, 3, 4, 5, 6, 7, 8, 9]
;pop 1 len=1 [|0|, 1, 2, 3, 4, 5, 6, 7, 8, 9]
;pop 0 len=0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
;stack is empty
;Error: attempt to pop form empty stack
;pop Null len=0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
;stack is empty

