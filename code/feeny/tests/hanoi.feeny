defn stack (max_size) :                                          ;I don't know how to include this
    object :
        var contents = array(max_size, 0)
        var pointer = -1
        var max = max_size

        method full? () :
            this.pointer >= this.max - 1

        method empty? () :
            this.pointer < 0

        method push (value) :
            if this.pointer >= this.max - 1:
                printf("Error: attempt to push to full stack\n")
                null
            else :
                this.pointer = this.pointer + 1
                this.contents[this.pointer] = value
                1

        method length () :
            this.pointer + 1
        
        method pop () :
            if this.pointer <0 :
                printf("Error: attempt to pop form empty stack\n")
                null
            else :
                var result = this.contents[this.pointer]
                this.pointer = this.pointer - 1
                result

        method print () :            
            printf("[")
            var i = 0
            while i < this.max :
                if i > 0 :
                    printf(", ")
                if i == this.pointer :
                    printf("|")
                printf("~", this.contents[i])
                if i == this.pointer :
                    printf("|")
                i = i + 1
            printf("]\n")
            
defn move (n, source, target, auxiliary) :
    printf("move ~\n", n)
    printf("  source: ")
    source.print()
    printf("  target: ")
    target.print()
    printf("  auxiliary: ")
    auxiliary.print()
    printf("\n")

    if n > 0 :
        printf("perform move ~ from within  move ~\n", n - 1, n)
        printf("  (swap auxiliary and target)\n\n")
        move(n - 1, source, auxiliary, target)

        var ring = source.pop()
        printf("move ~: pop from source ~ giving ", n, ring)
        source.print()

        if ring :
            var result = target.push(ring)
            printf("move ~: push to target ~ giving ", n, result)
            target.print()

            if result :
                printf("perform move ~ from within  move ~\n", n - 1, n)
                printf("  (swap auxiliary and source)\n\n")
                move(n - 1, auxiliary, target, source)
            else : 
                printf("Error: cannot push to target\n")
                null
        else :
            printf("Error: cannot pop from source\n")
            null

defn hanoi (n) : 
    var source = stack(n)
    var target = stack(n)
    var auxiliary = stack(n)

    var i = n
    while i > 0 :
        source.push(i)
        i = i - 1
    move(n, source, target, auxiliary)

    printf("DONE!\n")
    printf("  source: ")
    source.print()
    printf("  target: ")
    target.print()
    printf("  auxiliary: ")
    auxiliary.print()
    printf("\n")


hanoi(3)

;============================================================
;====================== Output ==============================
;============================================================
;
;move 3
;  source: [3, 2, |1|]
;  target: [0, 0, 0]
;  auxiliary: [0, 0, 0]
;
;perform move 2 from within  move 3
;  (swap auxiliary and target)
;
;move 2
;  source: [3, 2, |1|]
;  target: [0, 0, 0]
;  auxiliary: [0, 0, 0]
;
;perform move 1 from within  move 2
;  (swap auxiliary and target)
;
;move 1
;  source: [3, 2, |1|]
;  target: [0, 0, 0]
;  auxiliary: [0, 0, 0]
;
;perform move 0 from within  move 1
;  (swap auxiliary and target)
;
;move 0
;  source: [3, 2, |1|]
;  target: [0, 0, 0]
;  auxiliary: [0, 0, 0]
;
;move 1: pop from source 1 giving [3, |2|, 1]
;move 1: push to target 1 giving [|1|, 0, 0]
;perform move 0 from within  move 1
;  (swap auxiliary and source)
;
;move 0
;  source: [0, 0, 0]
;  target: [|1|, 0, 0]
;  auxiliary: [3, |2|, 1]
;
;move 2: pop from source 2 giving [|3|, 2, 1]
;move 2: push to target 1 giving [|2|, 0, 0]
;perform move 1 from within  move 2
;  (swap auxiliary and source)
;
;move 1
;  source: [|1|, 0, 0]
;  target: [|2|, 0, 0]
;  auxiliary: [|3|, 2, 1]
;
;perform move 0 from within  move 1
;  (swap auxiliary and target)
;
;move 0
;  source: [|1|, 0, 0]
;  target: [|3|, 2, 1]
;  auxiliary: [|2|, 0, 0]
;
;move 1: pop from source 1 giving [1, 0, 0]
;move 1: push to target 1 giving [2, |1|, 0]
;perform move 0 from within  move 1
;  (swap auxiliary and source)
;
;move 0
;  source: [|3|, 2, 1]
;  target: [2, |1|, 0]
;  auxiliary: [1, 0, 0]
;
;move 3: pop from source 3 giving [3, 2, 1]
;move 3: push to target 1 giving [|3|, 0, 0]
;perform move 2 from within  move 3
;  (swap auxiliary and source)
;
;move 2
;  source: [2, |1|, 0]
;  target: [|3|, 0, 0]
;  auxiliary: [3, 2, 1]
;
;perform move 1 from within  move 2
;  (swap auxiliary and target)
;
;move 1
;  source: [2, |1|, 0]
;  target: [3, 2, 1]
;  auxiliary: [|3|, 0, 0]
;
;perform move 0 from within  move 1
;  (swap auxiliary and target)
;
;move 0
;  source: [2, |1|, 0]
;  target: [|3|, 0, 0]
;  auxiliary: [3, 2, 1]
;
;move 1: pop from source 1 giving [|2|, 1, 0]
;move 1: push to target 1 giving [|1|, 2, 1]
;perform move 0 from within  move 1
;  (swap auxiliary and source)
;
;move 0
;  source: [|3|, 0, 0]
;  target: [|1|, 2, 1]
;  auxiliary: [|2|, 1, 0]
;
;move 2: pop from source 2 giving [2, 1, 0]
;move 2: push to target 1 giving [3, |2|, 0]
;perform move 1 from within  move 2
;  (swap auxiliary and source)
;
;move 1
;  source: [|1|, 2, 1]
;  target: [3, |2|, 0]
;  auxiliary: [2, 1, 0]
;
;perform move 0 from within  move 1
;  (swap auxiliary and target)
;
;move 0
;  source: [|1|, 2, 1]
;  target: [2, 1, 0]
;  auxiliary: [3, |2|, 0]
;
;move 1: pop from source 1 giving [1, 2, 1]
;move 1: push to target 1 giving [3, 2, |1|]
;perform move 0 from within  move 1
;  (swap auxiliary and source)
;
;move 0
;  source: [2, 1, 0]
;  target: [3, 2, |1|]
;  auxiliary: [1, 2, 1]
;
;DONE!
;  source: [1, 2, 1]
;  target: [3, 2, |1|]
;  auxiliary: [2, 1, 0]
;

